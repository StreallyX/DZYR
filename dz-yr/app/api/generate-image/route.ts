import { NextRequest, NextResponse } from 'next/server'
import sharp from 'sharp'
import { createClient } from '@supabase/supabase-js'

export async function GET(req: NextRequest) {
  const { searchParams } = new URL(req.url)
  const path = searchParams.get('path')

  if (!path) {
    return NextResponse.json({ error: 'Path manquant' }, { status: 400 })
  }

  const token = req.headers.get('Authorization')?.replace('Bearer ', '')
  if (!token) {
    return NextResponse.json({ error: 'Non authentifié' }, { status: 401 })
  }

  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      global: {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      },
    }
  )

  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (!user) {
    return NextResponse.json({ error: 'Utilisateur non connecté' }, { status: 401 })
  }

  const { data: signed } = await supabase.storage
    .from('contents')
    .createSignedUrl(path, 60)

  if (!signed?.signedUrl) {
    return NextResponse.json({ error: 'Fichier non trouvé' }, { status: 404 })
  }

  const response = await fetch(signed.signedUrl)
  const arrayBuffer = await response.arrayBuffer()
  const buffer = Buffer.from(arrayBuffer)

  const username = user.user_metadata?.username || user.email || 'user'

  const watermarkSvg = `
    <svg width="600" height="50">
      <text x="0" y="40" font-size="20" fill="white" font-family="Arial">@${username} – DZYR</text>
    </svg>
  `

  const userIdMeta = user.id.slice(0, 16)

  const watermarkedBuffer = await sharp(buffer)
    .composite([
      {
        input: Buffer.from(watermarkSvg),
        gravity: 'southwest', // ✅ En bas à gauche
      },
    ])
    .withMetadata({
      exif: {
        IFD0: {
          Copyright: `Generated by DZYR | TraceID:${userIdMeta}`,
        },
      },
    })
    .png()
    .toBuffer()

  return new NextResponse(watermarkedBuffer, {
    status: 200,
    headers: {
      'Content-Type': 'image/png',
      'Cache-Control': 'no-store',
    },
  })
}
